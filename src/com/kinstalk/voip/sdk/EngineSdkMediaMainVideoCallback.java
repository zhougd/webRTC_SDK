/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.kinstalk.voip.sdk;

public class EngineSdkMediaMainVideoCallback {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected EngineSdkMediaMainVideoCallback(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(EngineSdkMediaMainVideoCallback obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        EngineSdkJNI.delete_EngineSdkMediaMainVideoCallback(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    EngineSdkJNI.EngineSdkMediaMainVideoCallback_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    EngineSdkJNI.EngineSdkMediaMainVideoCallback_change_ownership(this, swigCPtr, true);
  }

  public EngineSdkMediaMainVideoCallback() {
    this(EngineSdkJNI.new_EngineSdkMediaMainVideoCallback(), true);
    EngineSdkJNI.EngineSdkMediaMainVideoCallback_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public void onMainVideoChannelDataReceived(EngineSdkCallInformation callInfo, EngineSdkVideoPixelFormat pixelFormat, int frameWidth, int frameHeight, char frameRotation, byte[] dataBuffer) {
    if (getClass() == EngineSdkMediaMainVideoCallback.class) EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelDataReceived__SWIG_0(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, pixelFormat.swigValue(), frameWidth, frameHeight, frameRotation, dataBuffer); else EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelDataReceivedSwigExplicitEngineSdkMediaMainVideoCallback__SWIG_0(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, pixelFormat.swigValue(), frameWidth, frameHeight, frameRotation, dataBuffer);
  }

  public void onMainVideoChannelDataReceived(EngineSdkCallInformation callInfo, EngineSdkVideoPixelFormat pixelFormat, int frameWidth, int frameHeight, char frameRotation, long dataBufderPtr, int dataLen) {
    if (getClass() == EngineSdkMediaMainVideoCallback.class) EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelDataReceived__SWIG_1(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, pixelFormat.swigValue(), frameWidth, frameHeight, frameRotation, dataBufderPtr, dataLen); else EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelDataReceivedSwigExplicitEngineSdkMediaMainVideoCallback__SWIG_1(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, pixelFormat.swigValue(), frameWidth, frameHeight, frameRotation, dataBufderPtr, dataLen);
  }

  public void onMainVideoTransmitingChannelStateChanged(EngineSdkCallInformation callInfo) {
    if (getClass() == EngineSdkMediaMainVideoCallback.class) EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoTransmitingChannelStateChanged(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo); else EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoTransmitingChannelStateChangedSwigExplicitEngineSdkMediaMainVideoCallback(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo);
  }

  public void onMainVideoReceivingChannelStateChanged(EngineSdkCallInformation callInfo) {
    if (getClass() == EngineSdkMediaMainVideoCallback.class) EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoReceivingChannelStateChanged(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo); else EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoReceivingChannelStateChangedSwigExplicitEngineSdkMediaMainVideoCallback(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo);
  }

  public void onMainVideoChannelRemoteRequestReceived(EngineSdkCallInformation callInfo, boolean tranmistingVideoPause, boolean allowResetByPeer) {
    if (getClass() == EngineSdkMediaMainVideoCallback.class) EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelRemoteRequestReceived(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, tranmistingVideoPause, allowResetByPeer); else EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelRemoteRequestReceivedSwigExplicitEngineSdkMediaMainVideoCallback(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, tranmistingVideoPause, allowResetByPeer);
  }

  public void onMainVideoChannelSynchronizeVideoFilterResult(EngineSdkCallInformation callInfo, boolean isSuccessful, long filterType) {
    if (getClass() == EngineSdkMediaMainVideoCallback.class) EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelSynchronizeVideoFilterResult(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, isSuccessful, filterType); else EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelSynchronizeVideoFilterResultSwigExplicitEngineSdkMediaMainVideoCallback(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, isSuccessful, filterType);
  }

  public void onMainVideoChannelVideoFilterIndicationReceivedFromRemote(EngineSdkCallInformation callInfo, long filterType) {
    if (getClass() == EngineSdkMediaMainVideoCallback.class) EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelVideoFilterIndicationReceivedFromRemote(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, filterType); else EngineSdkJNI.EngineSdkMediaMainVideoCallback_onMainVideoChannelVideoFilterIndicationReceivedFromRemoteSwigExplicitEngineSdkMediaMainVideoCallback(swigCPtr, this, EngineSdkCallInformation.getCPtr(callInfo), callInfo, filterType);
  }

}
